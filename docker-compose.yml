version: '3'

networks:
  laravel-api:
    driver: bridge


services:
  php:
    build:
      context: ./dockerfiles
      dockerfile: Dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    ports:
      - "8044:8000"
    volumes:
      - ./src:/var/www/html:delegated   
    networks:
      - laravel-api

  composer:
    build:
      context: ./dockerfiles
      dockerfile: Dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    volumes:
      - ./src:/var/www/html
    depends_on:
      - php
    entrypoint: [ 'composer', '--ignore-platform-reqs' ]
    networks:
      - laravel-api 

  artisan:
    build:
      context: ./dockerfiles
      dockerfile: Dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    volumes:
      - ./src:/var/www/html:delegated
    entrypoint: [ 'php', '/var/www/html/artisan' ]
    networks:
      - laravel-api

  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: docker_db
      MYSQL_USER: your_mysql_user
      MYSQL_PASSWORD: your_mysql_user_password
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped
    networks:
      - laravel-api

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    ports:
      - '8080:80'  # Map container port 80 to host port 8080
    depends_on:
      - db
    environment:
      PMA_HOST: db  # Connect phpMyAdmin to the "db" service
      MYSQL_ROOT_PASSWORD: 12345678
    networks:
      - laravel-api      

volumes:
  mysql_data: {}  # Define a persistent volume for database data       

  

# docker-compose run --rm composer install
# docker-compose run --rm artisan migrate
# docker-compose run --rm composer global require laravel/installer